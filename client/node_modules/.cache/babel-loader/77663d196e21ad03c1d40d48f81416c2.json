{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react', 'react-dom', 'react-async-script-loader', 'prop-types'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'), require('react-dom'), require('react-async-script-loader'), require('prop-types'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.react, global.reactDom, global.reactAsyncScriptLoader, global.propTypes);\n    global.index = mod.exports;\n  }\n})(this, function (exports, _react, _reactDom, _reactAsyncScriptLoader, _propTypes) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _reactDom2 = _interopRequireDefault(_reactDom);\n\n  var _reactAsyncScriptLoader2 = _interopRequireDefault(_reactAsyncScriptLoader);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var PaypalButton = function (_React$Component) {\n    _inherits(PaypalButton, _React$Component);\n\n    function PaypalButton(props) {\n      _classCallCheck(this, PaypalButton);\n\n      var _this = _possibleConstructorReturn(this, (PaypalButton.__proto__ || Object.getPrototypeOf(PaypalButton)).call(this, props));\n\n      window.React = _react2.default;\n      window.ReactDOM = _reactDom2.default;\n      _this.state = {\n        showButton: false\n      };\n      return _this;\n    }\n\n    _createClass(PaypalButton, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(_ref) {\n        var isScriptLoaded = _ref.isScriptLoaded,\n            isScriptLoadSucceed = _ref.isScriptLoadSucceed;\n\n        if (!this.state.show) {\n          if (isScriptLoaded && !this.props.isScriptLoaded) {\n            if (isScriptLoadSucceed) {\n              this.setState({\n                showButton: true\n              });\n            } else {\n              console.log('Cannot load Paypal script!');\n              this.props.onError();\n            }\n          }\n        }\n      }\n    }, {\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        var _props = this.props,\n            isScriptLoaded = _props.isScriptLoaded,\n            isScriptLoadSucceed = _props.isScriptLoadSucceed;\n\n        if (isScriptLoaded && isScriptLoadSucceed) {\n          this.setState({\n            showButton: true\n          });\n        }\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        var payment = function payment() {\n          return paypal.rest.payment.create(_this2.props.env, _this2.props.client, Object.assign({\n            transactions: [{\n              amount: {\n                total: _this2.props.total,\n                currency: _this2.props.currency\n              }\n            }]\n          }, _this2.props.paymentOptions), {\n            input_fields: {\n              // any values other than null, and the address is not returned after payment execution.\n              no_shipping: _this2.props.shipping\n            }\n          });\n        };\n\n        var onAuthorize = function onAuthorize(data, actions) {\n          return actions.payment.execute().then(function (payment_data) {\n            // console.log(`payment_data: ${JSON.stringify(payment_data, null, 1)}`)\n            var payment = Object.assign({}, _this2.props.payment);\n            payment.paid = true;\n            payment.cancelled = false;\n            payment.payerID = data.payerID;\n            payment.paymentID = data.paymentID;\n            payment.paymentToken = data.paymentToken;\n            payment.returnUrl = data.returnUrl; // getting buyer's shipping address and email\n\n            payment.address = payment_data.payer.payer_info.shipping_address;\n            payment.email = payment_data.payer.payer_info.email;\n\n            _this2.props.onSuccess(payment);\n          });\n        };\n\n        var ppbtn = '';\n\n        if (this.state.showButton) {\n          ppbtn = _react2.default.createElement(paypal.Button.react, {\n            env: this.props.env,\n            client: this.props.client,\n            style: this.props.style,\n            payment: payment,\n            commit: true,\n            onAuthorize: onAuthorize,\n            onCancel: this.props.onCancel // \"Error: Unrecognized prop: shipping\" was caused by the next line\n            // shipping={this.props.shipping}\n\n          });\n        }\n\n        return _react2.default.createElement('div', null, ppbtn);\n      }\n    }]);\n\n    return PaypalButton;\n  }(_react2.default.Component);\n\n  PaypalButton.propTypes = {\n    currency: _propTypes2.default.string.isRequired,\n    total: _propTypes2.default.number.isRequired,\n    client: _propTypes2.default.object.isRequired,\n    style: _propTypes2.default.object\n  };\n  PaypalButton.defaultProps = {\n    paymentOptions: {},\n    env: 'sandbox',\n    // null means buyer address is returned in the payment execution response\n    shipping: null,\n    onSuccess: function onSuccess(payment) {\n      console.log('The payment was succeeded!', payment);\n    },\n    onCancel: function onCancel(data) {\n      console.log('The payment was cancelled!', data);\n    },\n    onError: function onError(err) {\n      console.log('Error loading Paypal script!', err);\n    }\n  };\n  exports.default = (0, _reactAsyncScriptLoader2.default)('https://www.paypalobjects.com/api/checkout.js')(PaypalButton);\n});","map":null,"metadata":{},"sourceType":"script"}