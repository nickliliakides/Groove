{"ast":null,"code":"import _objectSpread from \"/Users/apple/Desktop/React/Groove/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/apple/Desktop/React/Groove/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/apple/Desktop/React/Groove/client/src/components/User/Admin/manageWoods.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport FormField from '../../shared/formField';\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\nimport faMinusCircle from '@fortawesome/fontawesome-free-solid/faMinusCircle';\nimport { updateField, generateData, resetFields, isFormValid } from '../../../utils/formActions';\nimport { connect } from 'react-redux';\nimport { getWoods, addWood, removeWood } from '../../../store/actions/productActions';\n\nconst ManageWoods = props => {\n  const _useState = useState({\n    formError: false,\n    formSuccess: false,\n    successMessage: '',\n    formdata: {\n      name: {\n        element: 'input',\n        value: '',\n        config: {\n          label: 'Wood name',\n          name: 'name_input',\n          type: 'text',\n          placeholder: 'Enter wood name'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        validationMessage: '',\n        showLabel: true\n      }\n    }\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  useEffect(() => {\n    props.dispatch(getWoods());\n  }, []);\n  const delIconStyles = {\n    color: 'red',\n    opacity: '0.5',\n    cursor: 'pointer'\n  };\n\n  const showCategories = () => props.product.woods && props.product.woods.map((w, i) => React.createElement(\"div\", {\n    key: w._id,\n    className: \"category_item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, w.name), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(FontAwesomeIcon, {\n    icon: faMinusCircle,\n    onClick: () => {\n      props.dispatch(removeWood(w._id));\n      setState(_objectSpread({}, state, {\n        formSuccess: true,\n        successMessage: 'Wood deleted succefully!'\n      }));\n      setTimeout(() => {\n        setState(_objectSpread({}, state, {\n          formSuccess: false,\n          successMessage: ''\n        }));\n      }, 3000);\n    },\n    style: delIconStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }))));\n\n  const handleChange = el => {\n    const formdata = updateField(el, state.formdata, 'woods');\n    setState(_objectSpread({}, state, {\n      formError: false,\n      formdata\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let dataToSubmit = generateData(state.formdata, 'woods');\n    let formIsValid = isFormValid(state.formdata, 'woods');\n\n    if (formIsValid) {\n      try {\n        props.dispatch(addWood(dataToSubmit, props.product.woods));\n      } catch (error) {\n        setState(_objectSpread({}, state, {\n          formError: true\n        }));\n        return;\n      }\n\n      handleResetFields();\n    } else {\n      setState(_objectSpread({}, state, {\n        formError: true\n      }));\n    }\n  };\n\n  const handleResetFields = () => {\n    const newFormData = resetFields(state.formdata, 'woods');\n    setState(_objectSpread({}, state, {\n      formdata: newFormData,\n      formSuccess: true,\n      successMessage: 'Wood saved successfully!'\n    }));\n    setTimeout(() => {\n      setState(_objectSpread({}, state, {\n        formSuccess: false,\n        successMessage: ''\n      }));\n    }, 3000);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"admin_category_wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Woods\"), React.createElement(\"div\", {\n    className: \"admin_two_column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"brands_container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, showCategories())), React.createElement(\"div\", {\n    className: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(FormField, {\n    id: 'name',\n    formdata: state.formdata.name,\n    onchange: el => handleChange(el),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), state.formError && React.createElement(\"div\", {\n    className: \"error_label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Something is wrong, please check your data.\"), state.formSuccess && React.createElement(\"div\", {\n    className: \"form_success\",\n    style: state.successMessage === 'Wood saved successfully!' ? {\n      background: '#4CAF50'\n    } : {\n      background: 'red'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, state.successMessage), React.createElement(\"button\", {\n    onClick: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"Add wood\")))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    product: state.product\n  };\n};\n\nexport default connect(mapStateToProps)(ManageWoods);","map":{"version":3,"sources":["/Users/apple/Desktop/React/Groove/client/src/components/User/Admin/manageWoods.jsx"],"names":["React","useState","useEffect","FormField","FontAwesomeIcon","faMinusCircle","updateField","generateData","resetFields","isFormValid","connect","getWoods","addWood","removeWood","ManageWoods","props","formError","formSuccess","successMessage","formdata","name","element","value","config","label","type","placeholder","validation","required","valid","touched","validationMessage","showLabel","state","setState","dispatch","delIconStyles","color","opacity","cursor","showCategories","product","woods","map","w","i","_id","setTimeout","handleChange","el","handleSubmit","e","preventDefault","dataToSubmit","formIsValid","error","handleResetFields","newFormData","background","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport FormField from '../../shared/formField';\nimport FontAwesomeIcon from '@fortawesome/react-fontawesome';\nimport faMinusCircle from '@fortawesome/fontawesome-free-solid/faMinusCircle';\nimport {\n  updateField,\n  generateData,\n  resetFields,\n  isFormValid\n} from '../../../utils/formActions';\nimport { connect } from 'react-redux';\nimport {\n  getWoods,\n  addWood,\n  removeWood\n} from '../../../store/actions/productActions';\n\nconst ManageWoods = props => {\n  const [state, setState] = useState({\n    formError: false,\n    formSuccess: false,\n    successMessage: '',\n    formdata: {\n      name: {\n        element: 'input',\n        value: '',\n        config: {\n          label: 'Wood name',\n          name: 'name_input',\n          type: 'text',\n          placeholder: 'Enter wood name'\n        },\n        validation: {\n          required: true\n        },\n        valid: false,\n        touched: false,\n        validationMessage: '',\n        showLabel: true\n      },\n    }\n  })\n\n  useEffect(() => {\n    props.dispatch(getWoods());\n  }, []);\n\n  const delIconStyles = {\n    color: 'red',\n    opacity: '0.5',\n    cursor: 'pointer'\n  }\n\n  const showCategories = () => (\n    props.product.woods && \n      props.product.woods.map((w,i) => (\n        <div key={w._id} className=\"category_item\">\n          <div>{w.name}</div>\n          <div><FontAwesomeIcon\n              icon={faMinusCircle}\n              onClick={() => {\n                props.dispatch(removeWood(w._id));\n                setState({\n                  ...state,\n                  formSuccess:true,\n                  successMessage: 'Wood deleted succefully!'\n                })\n                setTimeout(() => {\n                  setState({\n                    ...state,\n                    formSuccess: false,\n                    successMessage: ''\n                  });\n                }, 3000);\n              }}\n              style={delIconStyles}\n            /></div>\n        </div>\n      ))\n  )\n\n  const handleChange = el => {\n    const formdata = updateField(el, state.formdata, 'woods');\n    setState({\n      ...state,\n      formError: false,\n      formdata\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    let dataToSubmit = generateData(state.formdata, 'woods');\n    let formIsValid = isFormValid(state.formdata, 'woods');\n\n    if (formIsValid) {\n      try {\n        props.dispatch(addWood(dataToSubmit, props.product.woods));\n      } catch (error) {\n        setState({\n          ...state,\n          formError: true\n        });\n        return;\n      }\n      handleResetFields();\n    } else {\n      setState({\n        ...state,\n        formError: true\n      });\n    }\n  };\n\n  const handleResetFields = () => {\n    const newFormData = resetFields(state.formdata, 'woods');\n  setState({\n    ...state,\n    formdata: newFormData,\n    formSuccess: true,\n    successMessage: 'Wood saved successfully!'\n  });\n  setTimeout(() => {\n    setState({\n      ...state,\n      formSuccess: false,\n      successMessage: ''\n    });\n  }, 3000);\n};\n\n  return (\n    <div className=\"admin_category_wrapper\">\n      <h1>Woods</h1>\n      <div className=\"admin_two_column\">\n        <div className=\"left\">\n          <div className=\"brands_container\">\n            {showCategories()}\n          </div>\n        </div>\n        <div className=\"right\">\n          <form onSubmit={e => handleSubmit(e)}>\n          <FormField\n            id={'name'}\n            formdata={state.formdata.name}\n            onchange={el => handleChange(el)}\n          />\n          {state.formError && (\n              <div className=\"error_label\">\n                Something is wrong, please check your data.\n              </div>\n            )}\n            {state.formSuccess && (\n              <div \n                className=\"form_success\"\n                style={state.successMessage === 'Wood saved successfully!' ? { background: '#4CAF50'} : {background: 'red'}}\n              >{state.successMessage}</div>\n            )}\n            <button onClick={e => handleSubmit(e)}>Add wood</button>\n          </form>\n        </div>  \n      </div>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    product: state.product\n  };\n};\n\nexport default connect(mapStateToProps)(ManageWoods)\n"]},"metadata":{},"sourceType":"module"}