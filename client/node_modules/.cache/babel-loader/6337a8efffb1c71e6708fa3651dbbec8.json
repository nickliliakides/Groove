{"ast":null,"code":"var React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar createClass = require('create-react-class');\n/*\n\tNOTES\n\n\t1. Stop content jumping around when overflow is hidden on the body.\n\t2. Mobile Safari ignores { overflow: hidden } declaration on the body.\n\t3. Allow scroll on provided target.\n*/\n\n\nvar listenerOptions = {\n  capture: false,\n  passive: false\n};\nvar ScrollLock = createClass({\n  propTypes: {\n    scrollTarget: PropTypes.object,\n    preventContentJumping: PropTypes.bool\n  },\n  componentDidMount: function () {\n    if (!canUseDom()) return;\n    var scrollTarget = this.props.scrollTarget;\n    var target = document.body;\n\n    if (this.props.preventContentJumping) {\n      var scrollbarWidth = window.innerWidth - document.body.clientWidth; // 1.\n\n      target.style.paddingRight = scrollbarWidth + 'px';\n    }\n\n    target.style.overflowY = 'hidden';\n    target.addEventListener('touchmove', preventTouchMove, listenerOptions); // 2.\n\n    if (scrollTarget) {\n      scrollTarget.addEventListener('touchstart', preventInertiaScroll, listenerOptions); // 3.\n\n      scrollTarget.addEventListener('touchmove', allowTouchMove, listenerOptions); // 3.\n    }\n  },\n  componentWillUnmount: function () {\n    if (!canUseDom()) return;\n    var scrollTarget = this.props.scrollTarget;\n    var target = document.body;\n\n    if (this.props.preventContentJumping) {\n      target.style.paddingRight = '';\n    }\n\n    target.style.overflowY = '';\n    target.removeEventListener('touchmove', preventTouchMove, listenerOptions);\n\n    if (scrollTarget) {\n      scrollTarget.removeEventListener('touchstart', preventInertiaScroll, listenerOptions);\n      scrollTarget.removeEventListener('touchmove', allowTouchMove, listenerOptions);\n    }\n  },\n  render: function () {\n    return null;\n  }\n});\nScrollLock.defaultProps = {\n  preventContentJumping: true\n};\n\nfunction preventTouchMove(e) {\n  e.preventDefault();\n}\n\n;\n\nfunction allowTouchMove(e) {\n  e.stopPropagation();\n}\n\n;\n\nfunction preventInertiaScroll() {\n  var top = this.scrollTop;\n  var totalScroll = this.scrollHeight;\n  var currentScroll = top + this.offsetHeight;\n\n  if (top === 0) {\n    this.scrollTop = 1;\n  } else if (currentScroll === totalScroll) {\n    this.scrollTop = top - 1;\n  }\n}\n\nfunction canUseDom() {\n  return !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n}\n\n;\nmodule.exports = ScrollLock;","map":null,"metadata":{},"sourceType":"script"}