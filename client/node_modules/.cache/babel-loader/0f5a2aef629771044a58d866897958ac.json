{"ast":null,"code":"import _objectSpread from \"/Users/apple/Desktop/React/Groove/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport const validate = (el, formdata = []) => {\n  let error = [true, ''];\n\n  if (el.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(el.value);\n    const msg = \"\".concat(!valid ? 'Email is not valid' : '');\n    error = !valid ? [valid, msg] : error;\n  }\n\n  if (el.validation.confirm) {\n    const valid = el.value.trim() === formdata[el.validation.confirm].value.trim();\n    const msg = \"\".concat(!valid ? 'Passwords don\\'t match' : '');\n    error = !valid ? [valid, msg] : error;\n  }\n\n  if (el.validation.required) {\n    const valid = el.value.trim() !== '';\n    const msg = \"\".concat(!valid ? 'The filed is required' : '');\n    error = !valid ? [valid, msg] : error;\n  }\n\n  return error;\n};\nexport const updateField = (el, formdata, formName) => {\n  const newFormdata = _objectSpread({}, formdata);\n\n  const newElement = _objectSpread({}, newFormdata[el.id]);\n\n  newElement.value = el.e.target.value;\n\n  if (el.blur) {\n    let validData = validate(newElement, formdata);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = el.blur;\n  newFormdata[el.id] = newElement;\n  return newFormdata;\n};\nexport const generateData = (formdata, formName) => {\n  let dataToSubmit = {};\n\n  for (let key in formdata) {\n    if (key !== 'confirmPassword') {\n      dataToSubmit[key] = formdata[key].value;\n    }\n  }\n\n  return dataToSubmit;\n};\nexport const isFormValid = (formdata, formName) => {\n  let isValid = true;\n\n  for (let key in formdata) {\n    isValid = formdata[key].valid && isValid;\n  }\n\n  return isValid;\n};\nexport const populateOptionFields = (formdata, arrayData = [], field) => {\n  const newArray = [];\n\n  const newFormdata = _objectSpread({}, formdata);\n\n  arrayData.forEach(item => {\n    newArray.push({\n      key: item._id,\n      value: item.name\n    });\n  });\n  newFormdata[field].config.options = newArray;\n  return newFormdata;\n};\nexport const resetFields = (formdata, formName) => {\n  const newFormdata = _objectSpread({}, formdata);\n\n  for (let key in newFormdata) {\n    if (key === 'images') {\n      newFormdata[key].value = [];\n    } else {\n      newFormdata[key].value = '';\n    }\n\n    newFormdata[key].valid = false;\n    newFormdata[key].touched = false;\n    newFormdata[key].validationMessage = '';\n  }\n\n  return newFormdata;\n};\nexport const populateFields = (formData, userData) => {};","map":{"version":3,"sources":["/Users/apple/Desktop/React/Groove/client/src/utils/formActions.js"],"names":["validate","el","formdata","error","validation","email","valid","test","value","msg","confirm","trim","required","updateField","formName","newFormdata","newElement","id","e","target","blur","validData","validationMessage","touched","generateData","dataToSubmit","key","isFormValid","isValid","populateOptionFields","arrayData","field","newArray","forEach","item","push","_id","name","config","options","resetFields","populateFields","formData","userData"],"mappings":"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","sourcesContent":["export const validate = (el, formdata=[]) => {\n  let error = [true, ''];\n\n  if(el.validation.email){\n    const valid = /\\S+@\\S+\\.\\S+/.test(el.value);\n    const msg = `${!valid ? 'Email is not valid' : ''}`;\n    error = !valid ? [valid,msg] : error;\n  }\n  \n  if(el.validation.confirm){\n    const valid = el.value.trim() === formdata[el.validation.confirm].value.trim();\n    const msg = `${!valid ? 'Passwords don\\'t match' : ''}`;\n    error = !valid ? [valid,msg] : error;\n  }\n\n  if(el.validation.required){\n    const valid = el.value.trim() !== '';\n    const msg = `${!valid ? 'The filed is required' : ''}`;\n    error = !valid ? [valid,msg] : error;\n  }\n  return error;\n}\n\nexport const updateField = (el, formdata, formName) => {\n  const newFormdata = { ...formdata };\n  const newElement = { ...newFormdata[el.id] };\n\n  newElement.value = el.e.target.value;\n  if(el.blur){\n    let validData = validate(newElement, formdata);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = el.blur;\n  newFormdata[el.id] = newElement;\n\n  return newFormdata;\n}\n\nexport const generateData = (formdata, formName) => {\n  let dataToSubmit = {};\n\n  for(let key in formdata){\n    if(key !== 'confirmPassword'){\n      dataToSubmit[key] = formdata[key].value;\n    }\n  }\n  return dataToSubmit;\n}\n\nexport const isFormValid = (formdata, formName) => {\n  let isValid = true;\n\n  for(let key in formdata){\n    isValid = formdata[key].valid && isValid;\n  }\n  return isValid;\n}\n\nexport const populateOptionFields = (formdata, arrayData=[], field) => {\n  const newArray = [];\n  const newFormdata = {...formdata};\n\n  arrayData.forEach(item => {\n    newArray.push({key:item._id, value:item.name})\n  });\n\n  newFormdata[field].config.options = newArray;\n  return newFormdata;\n}\n\nexport const resetFields = (formdata, formName) => {\n  const newFormdata = {...formdata};\n\n  for(let key in newFormdata) {\n    if(key === 'images') {\n      newFormdata[key].value = [];\n    } else {\n      newFormdata[key].value = '';\n    }\n    \n    newFormdata[key].valid = false;\n    newFormdata[key].touched = false;\n    newFormdata[key].validationMessage = '';\n  }\n  return newFormdata;\n}\n\nexport const populateFields = (formData, userData) => {\n  \n}"]},"metadata":{},"sourceType":"module"}